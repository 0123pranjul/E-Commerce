@model JobPortalManagement.Models.DTO.RegistrationPageVM

@{
    ViewData["Title"] = "Register";

}
@{
    Func<string, string, string> cls = (type, css) =>
    {
        var t = type?.ToLower() ?? "";
        var @base = t switch
        {
            "dropdown" => "form-select",
            "checkbox" => "form-check-input",
            "textarea" => "form-control",
            _ => "form-control"
        };
        var extra = string.IsNullOrWhiteSpace(css) ? "" : " " + css.Trim();
        return @base + extra;
    };
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="card-title mb-4 text-center">Register</h2>

                    @if (TempData["Success"] != null)
                    {
                        <div class="alert alert-success">@TempData["Success"]</div>
                    }

                    <form asp-action="Index" asp-controller="Registration" method="post">
                        @Html.AntiForgeryToken()

                        <!-- Fixed fields -->
                        <div class="mb-3">
                            <label class="form-label fw-semibold">Username</label>
                            <input type="text" name="Username" class="form-control" placeholder="Enter username" required />
                        </div>

                        <div class="mb-3">
                            <label class="form-label fw-semibold">Password</label>
                            <input type="password" name="Password" class="form-control" placeholder="Enter password" required />
                        </div>

                        <hr />

                        <!-- Dynamic fields -->
                        @foreach (var field in Model.Fields)
                        {
                            <div class="mb-3">
                                <label class="form-label fw-semibold">@field.Label</label>

                                @if (field.FieldType.ToLower() == "text")
                                {
                                    <input type="text" name="@field.FieldName"
                                           class="@cls(field.FieldType, field.CssClass)"
                                           placeholder="@field.Label" @(field.IsRequired ? "required" : "") />
                                }
                                else if (field.FieldType.ToLower() == "email")
                                {
                                    <input type="email" name="@field.FieldName"
                                           class="@cls(field.FieldType, field.CssClass)"
                                           placeholder="@field.Label" @(field.IsRequired ? "required" : "") />
                                }
                                else if (field.FieldType.ToLower() == "number")
                                {
                                    <input type="number" name="@field.FieldName"
                                           class="@cls(field.FieldType, field.CssClass)"
                                           placeholder="@field.Label" @(field.IsRequired ? "required" : "") />
                                }
                                else if (field.FieldType.ToLower() == "date")
                                {
                                    <input type="date" name="@field.FieldName"
                                           class="@cls(field.FieldType, field.CssClass)"
                                    @(field.IsRequired ? "required" : "") />
                                }
                                else if (field.FieldType.ToLower() == "dropdown" && !string.IsNullOrEmpty(field.OptionsJson))
                                {
                                    var options = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(field.OptionsJson);
                                    <select name="@field.FieldName" class="@cls(field.FieldType, field.CssClass)"
                                    @(field.IsRequired ? "required" : "")>
                                        <option value="">-- Select --</option>
                                        @foreach (var opt in options)
                                        {
                                            <option value="@opt">@opt</option>
                                        }
                                    </select>
                                }
                                else if (field.FieldType.ToLower() == "textarea")
                                {
                                    <textarea name="@field.FieldName" class="@cls(field.FieldType, field.CssClass)"
                                              rows="3" placeholder="@field.Label" @(field.IsRequired ? "required" : "")></textarea>
                                }
                                else if (field.FieldType.ToLower() == "checkbox")
                                {
                                    <div class="form-check">
                                        <input type="checkbox" name="@field.FieldName" value="true" id="@field.FieldName"
                                               class="@cls(field.FieldType, field.CssClass)"
                                        @(field.IsRequired ? "required" : "") />
                                        <label class="form-check-label" for="@field.FieldName">@field.Label</label>
                                    </div>
                                }

                            </div>
                        }

                        <button type="submit" class="btn btn-primary w-100 mt-3">Register</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
